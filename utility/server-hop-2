--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
local PlaceID = game.PlaceId
local AllIDs = {}
local UsedIDs = {}
local actualHour = os.date("!*t").hour
local foundAnything = ""

-- Load the previously stored IDs
local File = pcall(function()
    local data = game:GetService('HttpService'):JSONDecode(readfile("BetaMain.json"))
    AllIDs = data.AllIDs or {}
    UsedIDs = data.UsedIDs or {}
end)

-- Initialize file if it doesn't exist
if not File then
    writefile("BetaMain.json", game:GetService('HttpService'):JSONEncode({AllIDs = {}, UsedIDs = {}}))
end

function saveData()
    writefile("BetaMain.json", game:GetService('HttpService'):JSONEncode({AllIDs = AllIDs, UsedIDs = UsedIDs}))
end

function TPReturner()
    local Site
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Desc&excludeFullGames=true&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Desc&excludeFullGames=true&limit=100&cursor=' .. foundAnything))
    end

    if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
        foundAnything = Site.nextPageCursor
    end

    for _, v in pairs(Site.data) do
        local ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) and not UsedIDs[ID] then
            table.insert(AllIDs, ID)
            UsedIDs[ID] = true
            saveData()
            game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
            wait(3)
            return
        end
    end

    -- If no suitable server is found, attempt the next batch
    if foundAnything ~= "" then
        TPReturner()
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
        end)
    end
end

-- Start the teleport process
Teleport()
